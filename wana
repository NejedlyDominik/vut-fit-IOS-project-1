#!/bin/sh

POSIXLY_CORRECT=yes

###########################################
##########                       ##########
##########    IOS - projekt 1    ##########
##########                       ##########
##########    Dominik Nejedly    ##########
##########                       ##########
##########       VUTBR FIT       ##########
##########                       ##########
##########         2019          ##########
##########                       ##########
###########################################

# Vypis chybovych hlaseni a ukonceni skriptu.
# pocet argumentu: 1 - n
# 1. argument - vyber hlaseni
# 2. - n. argument - upresnujici informace hlaseni
error_msg_exit ()
{
	printf "CHYBA: " >&2

	case "$1" in
		"1" )
			printf "Filtr %s muze byt zadan pouze jednou.\n" "$2" >&2
			exit 1
			;;
		"2" )
			printf "Soubor \"%s\" nelze nacist.\n" "$2" >&2
			exit 2
			;;
		"3" )
			printf "Nebyl zadan zadny vstup\n." >&2
			exit 3
			;;
		"4" )
			printf "U filtru %s zadan chybny format %s (\"%s\").\n" "$2" "$3" "$4" >&2
			exit 4
			;;
	esac
}

# Funkce pro kontrolu formatu vstupniho data a jeho prevod na cislo.
# pocet argumentu: 1
# 1. argument - vstupni datum
date_check ()
{
	printf "%s" "$1" | sed -n '/^[0-9]\{1,4\}-[0-9]\{1,2\}-[0-9]\{1,2\}\( [0-9]\{1,2\}\)\{0,1\}\(:[0-9]\{1,2\}\)\{0,2\}$/p' |\
	sed -n '/\( [^:]\)\{0,1\}/p' |\
	sed -e 's/[-:]/ /g' |\
	awk '{
	while(length($6) < 2) $6="0"$6;
	while(length($5) < 2) $5="0"$5;
	while(length($4) < 2) $4="0"$4;
	while(length($3) < 2) $3="0"$3;
	while(length($2) < 2) $2="0"$2;
	if($2 > 0 && $2 < 13 && $3 > 0 && $3 < 32 && $4 < 24 && $5 < 60 && $6 < 60){print}
	}' | sed -e 's/ //g'
}

# Funkce slouzi pro prevod mesice ze slova na cislo.
# pocet argumentu: 1
# 1. argument - retezec (datum)
month_to_number ()
{
    printf "%s" "$1" | sed \
	-e 's/Jan/01/' \
	-e 's/Feb/02/' \
	-e 's/Mar/03/' \
	-e 's/Apr/04/' \
	-e 's/May/05/' \
	-e 's/Jun/06/' \
	-e 's/Jul/07/' \
	-e 's/Aug/08/' \
	-e 's/Sep/09/' \
	-e 's/Oct/10/' \
	-e 's/Nov/11/' \
	-e 's/Dec/12/'
}

# Funkce porovnava dve data na zaklade argumentu, se kterymi je volana.
# Nejprve datum z logu prevede na cislo a porovna je s referencnim datem (take prevedenym na cislo).
# Pokud je splnena podminka cely radek logu s danym datem je vypsan. Porovnavaci kriterium zavisi na argumentu.
# pocet argumentu: 3
# 1. argument - logy nahrane v promenne
# 2. argument - vyber operace:
#	* AFTER - vypisuje data, nasledujici po referencnim datu
#	* BEFORE - vypisuje data, predchazejici referencnimu datu
# 3. argument - referencni datum (jiz prevedeno na cislo
time_function ()
{	
	printf "%s" "$1" | awk -v awk_ref_time="$3" -v operation="$2" '{
	date=$4;
	sub(/\[/, "", date)
	sub(/Jan/, "01", date);
	sub(/Feb/, "02", date);
	sub(/Mar/, "03", date);
	sub(/Apr/, "04", date);
	sub(/May/, "05", date);
	sub(/Jun/, "06", date);
	sub(/Jul/, "07", date);
	sub(/Aug/, "08", date);
	sub(/Sep/, "09", date);
	sub(/Oct/, "10", date);
	sub(/Nov/, "11", date);
	sub(/Dec/, "12", date);
	split(date, date_parts, /\/|:/);
	date=sprintf("%s%s%s%s%s%s", date_parts[3], date_parts[2], date_parts[1], date_parts[4], date_parts[5], date_parts[6]);
	if(operation == "AFTER" && date > awk_ref_time){print}
	else if(operation == "BEFORE" && date < awk_ref_time){print}
	}'
}

# Funkce nacita radky se standardniho vstupu.
# pocet argumentu: 0
load_stdin ()
{
	while read -r line
	do
		printf "%s\n" "$line"
	done
}

COMMAND=""			# zadany prikaz
DATETIME_AFTER=""	# datum filtru -a
DATETIME_BEFORE=""	# datum filtru -b
IPADDR=""			# ip adresa filtru -ip
URI=""				# uri filtru -uri
FILES=""			# jmena vsech vstupnich souboru

LOAD_FILES="false"	# Urcuje, kdy se zacinaji nacitat pouze soubory.

# Nacitani vstupnich dat.
# Cyklus prochazi jednotlive argumenty a uklada do promenych fitry, prikaz a nazvy vstupnich souboru.
while [ $# -gt 0 ]
do
	case "$1" in
		"list-ip" | "list-hosts" | "list-uri" | "hist-ip" | "hist-load" )
			COMMAND="$1"		# ulozeni zadaneho prikazu
			LOAD_FILES="true"	# nastaveni nacitani pouze souboru
			;;
		"-a" )
			# Pokud se stejny filtr vyskytuje vicekrat, program konci s chybou.
			if [ -n "$DATETIME_AFTER" ]
			then
				error_msg_exit "1" "$1"
			fi
			
			# Pred ulozenim data do promenne je kotrolovan jeho format. Pokud projde kontrolou, tak je ulozen do promenne.
			DATETIME_AFTER=$( date_check "$2" )
			
			# Pokud melo vstupni datum spatny format, promenna zustava prazdna a program konci s chybou.
			if [ -z "$DATETIME_AFTER" ]
			then
				error_msg_exit "4" "$1" "data" "$2"
			fi

			shift
			;;
		"-b" )
			if [ -n "$DATETIME_BEFORE" ]
			then
				error_msg_exit "1" "$1"
			fi

			DATETIME_BEFORE=$( date_check "$2" )

			if [ -z "$DATETIME_BEFORE" ]
			then
				error_msg_exit "4" "$1" "data" "$2"
			fi

			shift
			;;
		"-ip" )
			if [ -n "$IPADDR" ]
			then
				error_msg_exit "1" "$1"
			fi
			
			# Kontrola formatu ip adresy IPv4.
			IPADDR=$( printf "%s" "$2" | sed -n '/^[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}\.[0-9]\{1,3\}$/p' | awk '{
			split($0, ip, ".");
			if(ip[1] < 256 && ip[2] < 256 && ip[3] < 256 && ip[4] < 256){print}
			}' )

			if [ -z "$IPADDR" ]
			then
				# Kontrola formatu ip adresy IPv6.
				IPADDR=$( printf "%s" "$2" | sed -n '/^\([0-9a-fA-F]\{0,4\}:\)\{0,7\}[0-9a-fA-F]\{0,4\}$/p' | sed -n '/[^:]/p' | awk '{
				if(index($0, ":::") == 0 && gsub("::", "::", $0) < 2){print}}' )
			fi
			
			# Chybny format --> program konci s chybou.
			if [ -z "$IPADDR" ]
			then
				error_msg_exit "4" "$1" "ip adresy" "$2"
			fi

			shift
			;;
		"-uri" )
			if [ -n "$URI" ]
			then
				error_msg_exit "1" "$1"
			fi
			
			# Pred / je pridan \.
			URI=$( printf "%s" "$2" | sed -e 's/\//\\\//g' )
			shift
			;;
		* )
			FILES="$1"
			LOAD_FILES="true"
			;;
	esac
	shift

	# Cyklus pro nacitani jmen souboru.
	if [ "$LOAD_FILES" = "true" ]
	then
		while [ $# -gt 0 ]
		do
			FILES="$FILES $1"
			shift
		done
	fi
done

# Pokud jsme mezi argumenty dostali nejake vstupni soubory, nacteme jejich obsah do jedne promenne.
if [ -n "$FILES" ]
then
	for i in $FILES
	do
		case $i in
			*".gz" )
				if [ -r "$i" ]
				then
					content="$content$(gunzip -c "$i")
"
				else
					# Pokud soubor nelze precist, program konci s chybou.
					error_msg_exit "2" "$i"
				fi
				;;
			* )
				if [ -r "$i" ]
				then
					content="$content$(cat "$i")
"
				else
					error_msg_exit "2" "$i"
				fi
				;;
		esac
	done
else
	# Pokud nebyli zadany zadne vstupni soubory, data se nacitaji ze standardniho vstupu.
	content=$( load_stdin )
fi

# Pokud nebyl zadan zadny vstup, program konci s chybou.
if [ -z "$content" ]
then
	error_msg_exit "3"
fi

# Odstraneni prebytecneho znaku konce radku v promenne s nactenym obsahem souboru.
content=$( printf "%s" "$content" | sed 's/\\n$//' )

# Filtr podle ip adresy. Vypise pouze radky s danou ip adresou.
if [ -n "$IPADDR" ]
then
	content=$( printf "%s" "$content" | awk -v ip_address="$IPADDR" '{if(ip_address == $1) print}' )
fi

# Filtr podle uri. Vypose pouze radky s danou uri.
if [ -n "$URI" ]
then
	content=$( printf "%s" "$content" | awk '{if($6 == "\"GET" || $6 == "\"POST" || $6 == "\"HEAD") print}' | awk '$7 ~ /^'"$URI"'$/' )
fi

# Filtr podle data -a. Vypise pouze radky s datem po referencnim datu.
if [ -n "$DATETIME_AFTER" ]
then
	content=$( time_function "$content" "AFTER" "$DATETIME_AFTER" )
fi

# Filtr podle data -b. Vypise pouze radky s datem po referencnim datu.
if [ -n "$DATETIME_BEFORE" ]
then
	content=$( time_function "$content" "BEFORE" "$DATETIME_BEFORE" )
fi

# Vypis unikatnich ip adres. (Vypise 1. sloupec z logu)
if [ "$COMMAND" = "list-ip" ]
then
	content=$( printf "%s" "$content" | awk '{print $1}' | sort -u )

# Vypis seznamu unikatnich zdrojovych domenovych jmen.
elif [ "$COMMAND" = "list-hosts" ]
then
	content=$( printf "%s" "$content" | awk '{print $1}' | while read -r line
	do 
		if host=$( host "$line" )
		then 
			printf "%s" "$host" | awk '{print $5}'
		else
			printf "%s\n" "$line"
		fi 
	done | sort -u )

# Vypis seznamu cilovych zdroju (URI). (Vypise 7. sloupec z logu)
elif [ "$COMMAND" = "list-uri" ]
then
	content=$( printf "%s" "$content" | cut -f 6-7 -d " " | grep -e 'GET' -e 'POST' -e 'HEAD' | cut -f 2 -d " " | sort -u )

# Vypis histogramu cetnosti dotazu podle zdrojovych IP adres.
elif [ "$COMMAND" = "hist-ip" ]
then
	content=$( printf "%s" "$content" | cut -f 1 -d " " | sort | uniq -c | sort -n -r | awk '{
	sharp_string="";
	counter=$1;
	while(counter-->0) sharp_string=sharp_string"#";
	printf "%s (%d): %s\n", $2, $1, sharp_string}' )

# Vypis histogramu zateze (tj. poctu dotazu v jednotlivych casovych intervalech).
elif [ "$COMMAND" = "hist-load" ]
then
	content=$( printf "%s" "$content" | cut -f 4 -d " " | sed -e 's/\[//' | cut -f 1-2 -d ":" | sort | uniq -c | sed -e 's/[/:]/ /g' )
	content=$( month_to_number "$content" | awk '{
	sharp_string="";
	counter=$1;
	while(counter-->0) sharp_string=sharp_string"#";
	printf "%s%s%s%s %s-%s-%s %s:00 (%d): %s\n", $4, $3, $2, $5, $4, $3, $2, $5, $1, sharp_string}' )
	content=$( printf "%s" "$content" | sort -n | cut -f 2- -d " " )

fi

# Pokud neni promenna s prefiltrovanymi daty prazdna, vypise se jeni obsah.
if [ -n "$content" ]
then
	printf "%s\n" "$content"
fi